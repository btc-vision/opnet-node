syntax = "proto3";
package OPNetProtocolV1;

enum PeerType {
  ARCHIVE = 0;
  FULL = 1;
  LIGHT = 2;
}

enum ChainIds {
  Bitcoin = 0;
}

enum BitcoinNetworks {
  Unknown = 0;
  Mainnet = 1;
  Testnet = 2;
  Regtest = 3;
  Signet = 4;
}

/*
  AUTHENTICATION
*/
message Authentication {
  string version = 1;
  bytes clientAuthCipher = 2;
  string trustedChecksum = 3;
  PeerType type = 4;
  BitcoinNetworks network = 5;
  ChainIds chainId = 6;
}

enum AuthenticationStatusEnum {
  SUCCESS = 0;
  ERROR = 1;
}

message AuthenticationStatus {
  AuthenticationStatusEnum status = 1;
  string message = 2;
  optional bytes challenge = 3;
}

message ClientKeyCipherExchange {
  bytes clientKeyCipher = 1;
  bytes clientAuthCipher = 2;
  bytes identity = 3;
  bytes challenge = 4;
}

message ServerKeyCipherExchange {
  bytes serverKeyCipher = 1;
  bytes serverSigningCipher = 2;
  bool encryptionEnabled = 3;
}

/*
  NETWORKING
*/

message Ping {
  uint64 timestamp = 1;
  uint64 lastPing = 2;
}

/*
  PEERING
*/

message PeerInfo {
  string opnetVersion = 1;
  string identity = 2;
  uint32 type = 3;
  uint32 network = 4;
  ChainIds chainId = 5;
  bytes peer = 6;
  repeated bytes addresses = 7;
}

message DiscoveryResponse {
  repeated PeerInfo peers = 1;
}

message Discover {
  string version = 1;
  string trustedChecksum = 2;
}

/*
  BLOCKCHAIN
*/
message BroadcastTransaction {
  bytes transaction = 1;
  bool psbt = 2;
}

/* BLOCKS */

message OPNetBlockWitness {
  bytes signature = 1;
  optional bytes opnetPubKey = 2;
  optional string identity = 3;
}

message ChecksumProof {
  repeated string proof = 1;
}

message BlockHeaderWitness {
  uint64 blockNumber = 1;
  string blockHash = 2;
  string previousBlockHash = 3;

  string merkleRoot = 4;
  string receiptRoot = 5;
  string storageRoot = 6;

  string checksumHash = 7;
  repeated ChecksumProof checksumProofs = 8;
  string previousBlockChecksum = 9;

  uint32 txCount = 10;

  repeated OPNetBlockWitness validatorWitnesses = 11;
  repeated OPNetBlockWitness trustedWitnesses = 12;
}

/* SYNC */
message SyncBlockHeadersRequest {
  uint64 blockNumber = 1;
}

message SyncBlockHeadersResponse {
  uint64 blockNumber = 1;

  repeated OPNetBlockWitness validatorWitnesses = 2;
  repeated OPNetBlockWitness trustedWitnesses = 3;
}
