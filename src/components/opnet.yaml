asyncapi: '2.4.0'
info:
  title: OpNet API
  description: Hey! This is the OpNet API.
  version: '1.0.0'
servers:
  production:
    url: wss://opnet.org/api/v1/ws
    protocol: wss
    description: This is the official OpNet Live Websocket Server
    security:
      - apiKey: [ ]
  testnet:
    url: wss://testnet.opnet.org/api/v1/ws
    protocol: wss
    description: This is the official OpNet Testnet Live Websocket Server
    security:
      - apiKey: [ ]
defaultContentType: binary

channels:
  newBlock:
    description: Emit the current head block of the blockchain.
    subscribe:
      summary: Emited when a new block is created on the blockchain.
      message:
        $ref: '#/components/messages/heapBlock'

components:
  messages:
    whoami:
      name: Post client information
      title: Server-Client Connection Configurations
      summary: The server tries to identify the client and trigger the handshake process.
      contentType: binary
      payload:
        $ref: '#/components/schemas/whoami'
    auth:
      name: Authentification Client-Server
      title: Client-Server Handshake
      summary: The client must send this message to the server to authenticate itself.
      contentType: binary
      payload:
        $ref: '#/components/schemas/auth'
    handshake:
      name: Authentification Server-Client
      title: Server-Client Handshake
      summary: The server must send this message to the client to authenticate itself.
      contentType: binary
      payload:
        $ref: '#/components/schemas/logon'
    heapBlock:
      name: newBlock
      title: New Block Creation
      summary: Emited when a new block is created on the blockchain.
      contentType: binary
      payload:
        $ref: '#/components/schemas/heapBlockPayload'
  messageTraits:
    commonHeaders:
      headers:
        type: object
        properties:
          my-app-header:
            type: integer
            minimum: 0
            maximum: 100

  schemas:
    whoami:
      type: object
      properties:
        type:
          type: string
          enum:
            - auth
        payload:
          type: object
          properties:
            apiKey:
              type: string
              description: The API Key of the client.
            apiSecret:
              type: string
              description: The API Secret of the client.
    auth:
      properties:
        type:
          type: string
          const: authentication
        payload:
          type: string
          description: Post generated by the client.
      required:
        - type
        - payload
    logon:
      properties:
        type:
          type: string
          const: logon
        payload:
          type: string
          description: The handshake response from the server.
      required:
        - type
        - payload
    heapBlockPayload:
      allOf:
        - properties:
            type:
              type: string
              const: heapBlock
            heapBlock:
              type: integer
              minimum: 15627554
              description: The current heap block of the Ethereum blockchain.
          required:
            - type
            - heapBlock
        - $ref: '#/components/schemas/default'
    heartbeat:
      allOf:
        - properties:
            type:
              type: string
              const: heartbeat
          required:
            - type
        - $ref: '#/components/schemas/default'
    default:
      type: object
      description: This object is always part of the payload. In case of type=heartbeat, these are the only fields.
      required:
        - type
        - authorization
      properties:
        authorization:
          type: string
          description: The authorization token must always be sent with the payload to decrypt and encrypt the payload.

  securitySchemes:
    apiKey:
      type: apiKey
      in: user
      description: Provide your API key as the user and leave the password empty.
    #supportedOauthFlows:
    #  type: oauth2
    #  description: Flows to support OAuth 2.0
    #  flows:
    #    implicit:
    #      authorizationUrl: 'https://authserver.example/auth'
    #      scopes:
    #        'opnet:on': Ability to switch lights on
    #    password:
    #      tokenUrl: 'https://authserver.example/token'
    #      scopes:
    #        'opnet:on': Ability to switch lights on
    #    clientCredentials:
    #      tokenUrl: 'https://authserver.example/token'
    #      scopes:
    #        'motoswapon': Ability to switch lights on
    #    authorizationCode:
    #      authorizationUrl: 'https://authserver.example/auth'
    #      tokenUrl: 'https://authserver.example/token'
    #      refreshUrl: 'https://authserver.example/refresh'
    #      scopes:
    #        'opnet:on': Ability to switch lights on
    #openIdConnectWellKnown:
    #  type: openIdConnect
    #  openIdConnectUrl: 'https://authserver.example/.well-known'
