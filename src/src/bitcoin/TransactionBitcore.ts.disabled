import { Logger } from '@btc-vision/motoswapcommon';
import * as Test from '@cmdcode/crypto-utils';
import { initEccLib } from 'bitcoinjs-lib';

import bitcore, { Transaction } from 'bitcore-lib';

import { ECPairInterface } from 'ecpair';
import * as ecc from 'tiny-secp256k1';

initEccLib(ecc);

export interface ITransaction {
    readonly from: bitcore.Address;
    readonly to: bitcore.Address;
}

export class BitcoreTransaction extends Logger {
    public readonly logColor: string = '#785def';
    private readonly tseckey: string;
    private readonly pubkey: string;
    private readonly transaction: Transaction = new bitcore.Transaction();

    constructor(
        private readonly utxos: Transaction.UnspentOutput[],
        private readonly data: ITransaction,
        private readonly salt: ECPairInterface,
    ) {
        super();

        if (!this.salt.privateKey) {
            throw new Error('Private key is required');
        }

        const seckey = Test.keys.get_seckey(this.salt.privateKey);
        const pubkey = Test.keys.get_pubkey(seckey, true);

        this.pubkey = pubkey.hex;
        this.tseckey = seckey.hex;

        this.buildTransaction();
    }

    public signTransaction(): string {
        this.transaction.sign(this.tseckey);
        const verified = this.transaction.verify();

        if (verified !== true) {
            this.error(`Transaction verification failed: ${verified}`);
        } else {
            this.log(`Transaction verified.`);
        }

        return this.transaction.serialize({
            disableAll: true,
        });
    }

    private buildTransaction(): void {
        if (!this.utxos[0].address) {
            throw new Error('Address is required');
        }

        this.transaction.enableRBF();
        this.transaction.from(this.utxos);

        this.transaction.to(this.data.to, bitcore.Transaction.DUST_AMOUNT);
        //this.transaction.change(this.utxos[0].address);

        console.log('fee', this.transaction.getFee(), this.transaction.outputs);
    }
}
